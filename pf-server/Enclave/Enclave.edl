/*
 * Copyright (C) 2011-2017 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {
    
    include "user_types.h" /* buffer_t */

    /* Import ECALL/OCALL from sub-directory EDLs.
     *  [from]: specifies the location of EDL file. 
     *  [import]: specifies the functions to import, 
     *  [*]: implies to import all functions.
     */
    

    trusted{
        public int g_pf_demo(void);

        public pf_status_t g_pf_open(pf_handle_t handle, [in, size=256] const char* path, uint64_t underlying_size,
                    pf_file_mode_t mode, bool create, [in, size=16] const pf_key_t* key, [out] pf_context_t** context);
        public pf_status_t g_pf_read([user_check] pf_context_t* pf, uint64_t offset, [out, size=100] void* output, size_t read_size,
                    [user_check] size_t* bytes_read);
        public pf_status_t g_pf_write([user_check] pf_context_t* pf, uint64_t offset, [in, size=100] const void* input, size_t write_size);
        public pf_status_t g_pf_close([user_check] pf_context_t* pf);

    };
    untrusted {
        void Ocall_PrintString([in, string] const char *str);

        int ocall_open_helper([in, string]const char* path, bool create, pf_file_mode_t mode, [out]size_t* file_size);
        void ocall_close_helper(int fd);
        ssize_t ocall_pread(int fd, [out, size=count] void* buf, size_t count, off_t offset);
        ssize_t ocall_pwrite(int fd, [in, size=count] const void *buf, size_t count, off_t offset);
        int ocall_ftruncate(int fd, uint64_t length);
    };

};